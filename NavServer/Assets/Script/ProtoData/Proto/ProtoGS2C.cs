// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto_GS2C.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace YouYou.Proto {

  /// <summary>Holder for reflection information generated from Proto_GS2C.proto</summary>
  public static partial class ProtoGS2CReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto_GS2C.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoGS2CReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQcm90b19HUzJDLnByb3RvEgxZb3VZb3UuUHJvdG8aElByb3RvX0NvbW1v",
            "bi5wcm90byJ5ChtHUzJDX1JldHVybkVudGVyU2NlbmVfQXBwbHkSDwoHU2Nl",
            "bmVJZBgBIAEoBRIOCgZSZXN1bHQYAiABKAgSJgoHQ3VyclBvcxgDIAEoCzIV",
            "LllvdVlvdS5Qcm90by5WZWN0b3IzEhEKCVJvdGF0aW9uWRgEIAEoAiLIAgoX",
            "V1MyQ19TY2VuZUxpbmVSb2xlX0RBVEESKAoIUm9sZVR5cGUYASABKA4yFi5Z",
            "b3VZb3UuUHJvdG8uUm9sZVR5cGUSDgoGUm9sZUlkGAIgASgDEhIKCkJhc2VS",
            "b2xlSWQYAyABKAUSCwoDU2V4GAQgASgFEhAKCE5pY2tOYW1lGAUgASgJEg0K",
            "BUxldmVsGAYgASgFEiYKB0N1cnJQb3MYByABKAsyFS5Zb3VZb3UuUHJvdG8u",
            "VmVjdG9yMxIRCglSb3RhdGlvblkYCCABKAISKAoJVGFyZ2V0UG9zGAkgASgL",
            "MhUuWW91WW91LlByb3RvLlZlY3RvcjMSDgoGU3RhdHVzGAogASgFEg4KBkN1",
            "cnJIUBgLIAEoBRINCgVNYXhIUBgMIAEoBRIOCgZDdXJyTVAYDSABKAUSDQoF",
            "TWF4TVAYDiABKAUiVwocR1MyQ19SZXR1cm5TY2VuZUxpbmVSb2xlTGlzdBI3",
            "CghSb2xlTGlzdBgBIAMoCzIlLllvdVlvdS5Qcm90by5XUzJDX1NjZW5lTGlu",
            "ZVJvbGVfREFUQSJYCh1HUzJDX1JldHVyblJvbGVFbnRlclNjZW5lTGluZRI3",
            "CghSb2xlTGlzdBgBIAMoCzIlLllvdVlvdS5Qcm90by5XUzJDX1NjZW5lTGlu",
            "ZVJvbGVfREFUQSJtCh1HUzJDX1JldHVyblJvbGVMZWF2ZVNjZW5lTGluZRIO",
            "CgZSb2xlSWQYASABKAMSPAoSbGVhdmVTY2VuZUxpbmVUeXBlGAIgASgOMiAu",
            "WW91WW91LlByb3RvLkxlYXZlU2NlbmVMaW5lVHlwZSKyAQoaR1MyQ19SZXR1",
            "cm5Sb2xlQ2hhbmdlU3RhdGUSDgoGUm9sZUlkGAEgASgDEg4KBlN0YXR1cxgC",
            "IAEoBRIPCgdTa2lsbElkGAMgASgFEiYKB0N1cnJQb3MYBCABKAsyFS5Zb3VZ",
            "b3UuUHJvdG8uVmVjdG9yMxIRCglSb3RhdGlvblkYBSABKAISKAoJVGFyZ2V0",
            "UG9zGAYgASgLMhUuWW91WW91LlByb3RvLlZlY3RvcjNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::YouYou.Proto.ProtoCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.GS2C_ReturnEnterScene_Apply), global::YouYou.Proto.GS2C_ReturnEnterScene_Apply.Parser, new[]{ "SceneId", "Result", "CurrPos", "RotationY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.WS2C_SceneLineRole_DATA), global::YouYou.Proto.WS2C_SceneLineRole_DATA.Parser, new[]{ "RoleType", "RoleId", "BaseRoleId", "Sex", "NickName", "Level", "CurrPos", "RotationY", "TargetPos", "Status", "CurrHP", "MaxHP", "CurrMP", "MaxMP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.GS2C_ReturnSceneLineRoleList), global::YouYou.Proto.GS2C_ReturnSceneLineRoleList.Parser, new[]{ "RoleList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.GS2C_ReturnRoleEnterSceneLine), global::YouYou.Proto.GS2C_ReturnRoleEnterSceneLine.Parser, new[]{ "RoleList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.GS2C_ReturnRoleLeaveSceneLine), global::YouYou.Proto.GS2C_ReturnRoleLeaveSceneLine.Parser, new[]{ "RoleId", "LeaveSceneLineType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YouYou.Proto.GS2C_ReturnRoleChangeState), global::YouYou.Proto.GS2C_ReturnRoleChangeState.Parser, new[]{ "RoleId", "Status", "SkillId", "CurrPos", "RotationY", "TargetPos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///服务器返回进入场景申请[c#]
  /// </summary>
  public sealed partial class GS2C_ReturnEnterScene_Apply : YouYou.IProto, pb::IMessage<GS2C_ReturnEnterScene_Apply> {
    private static readonly pb::MessageParser<GS2C_ReturnEnterScene_Apply> _parser = new pb::MessageParser<GS2C_ReturnEnterScene_Apply>(() => new GS2C_ReturnEnterScene_Apply());
    public ushort ProtoId => ProtoIdDefine.Proto_GS2C_ReturnEnterScene_Apply;
    public string ProtoEnName => "GS2C_ReturnEnterScene_Apply";
    public ProtoCategory Category => ProtoCategory.GameServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GS2C_ReturnEnterScene_Apply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnEnterScene_Apply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnEnterScene_Apply(GS2C_ReturnEnterScene_Apply other) : this() {
      sceneId_ = other.sceneId_;
      result_ = other.result_;
      currPos_ = other.currPos_ != null ? other.currPos_.Clone() : null;
      rotationY_ = other.rotationY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnEnterScene_Apply Clone() {
      return new GS2C_ReturnEnterScene_Apply(this);
    }

    /// <summary>Field number for the "SceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    /// <summary>
    ///场景编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private bool result_;
    /// <summary>
    ///是否可以进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "CurrPos" field.</summary>
    public const int CurrPosFieldNumber = 3;
    private global::YouYou.Proto.Vector3 currPos_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.Vector3 CurrPos {
      get { return currPos_; }
      set {
        currPos_ = value;
      }
    }

    /// <summary>Field number for the "RotationY" field.</summary>
    public const int RotationYFieldNumber = 4;
    private float rotationY_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GS2C_ReturnEnterScene_Apply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GS2C_ReturnEnterScene_Apply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(CurrPos, other.CurrPos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (currPos_ != null) hash ^= CurrPos.GetHashCode();
      if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (currPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrPos);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RotationY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (currPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrPos);
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GS2C_ReturnEnterScene_Apply other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.currPos_ != null) {
        if (currPos_ == null) {
          CurrPos = new global::YouYou.Proto.Vector3();
        }
        CurrPos.MergeFrom(other.CurrPos);
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 26: {
            if (currPos_ == null) {
              CurrPos = new global::YouYou.Proto.Vector3();
            }
            input.ReadMessage(CurrPos);
            break;
          }
          case 37: {
            RotationY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回场景线中角色列表消息[c#]
  /// </summary>
  public sealed partial class WS2C_SceneLineRole_DATA : YouYou.IProto, pb::IMessage<WS2C_SceneLineRole_DATA> {
    private static readonly pb::MessageParser<WS2C_SceneLineRole_DATA> _parser = new pb::MessageParser<WS2C_SceneLineRole_DATA>(() => new WS2C_SceneLineRole_DATA());
    public ushort ProtoId => ProtoIdDefine.Proto_WS2C_SceneLineRole_DATA;
    public string ProtoEnName => "WS2C_SceneLineRole_DATA";
    public ProtoCategory Category => ProtoCategory.WorldServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WS2C_SceneLineRole_DATA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WS2C_SceneLineRole_DATA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WS2C_SceneLineRole_DATA(WS2C_SceneLineRole_DATA other) : this() {
      roleType_ = other.roleType_;
      roleId_ = other.roleId_;
      baseRoleId_ = other.baseRoleId_;
      sex_ = other.sex_;
      nickName_ = other.nickName_;
      level_ = other.level_;
      currPos_ = other.currPos_ != null ? other.currPos_.Clone() : null;
      rotationY_ = other.rotationY_;
      targetPos_ = other.targetPos_ != null ? other.targetPos_.Clone() : null;
      status_ = other.status_;
      currHP_ = other.currHP_;
      maxHP_ = other.maxHP_;
      currMP_ = other.currMP_;
      maxMP_ = other.maxMP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WS2C_SceneLineRole_DATA Clone() {
      return new WS2C_SceneLineRole_DATA(this);
    }

    /// <summary>Field number for the "RoleType" field.</summary>
    public const int RoleTypeFieldNumber = 1;
    private global::YouYou.Proto.RoleType roleType_ = 0;
    /// <summary>
    ///角色类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.RoleType RoleType {
      get { return roleType_; }
      set {
        roleType_ = value;
      }
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "BaseRoleId" field.</summary>
    public const int BaseRoleIdFieldNumber = 3;
    private int baseRoleId_;
    /// <summary>
    ///基础角色编号职业id或者怪id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseRoleId {
      get { return baseRoleId_; }
      set {
        baseRoleId_ = value;
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 4;
    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "NickName" field.</summary>
    public const int NickNameFieldNumber = 5;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "CurrPos" field.</summary>
    public const int CurrPosFieldNumber = 7;
    private global::YouYou.Proto.Vector3 currPos_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.Vector3 CurrPos {
      get { return currPos_; }
      set {
        currPos_ = value;
      }
    }

    /// <summary>Field number for the "RotationY" field.</summary>
    public const int RotationYFieldNumber = 8;
    private float rotationY_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    /// <summary>Field number for the "TargetPos" field.</summary>
    public const int TargetPosFieldNumber = 9;
    private global::YouYou.Proto.Vector3 targetPos_;
    /// <summary>
    ///移动目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.Vector3 TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 10;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "CurrHP" field.</summary>
    public const int CurrHPFieldNumber = 11;
    private int currHP_;
    /// <summary>
    ///当前HP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrHP {
      get { return currHP_; }
      set {
        currHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 12;
    private int maxHP_;
    /// <summary>
    ///最大HP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "CurrMP" field.</summary>
    public const int CurrMPFieldNumber = 13;
    private int currMP_;
    /// <summary>
    ///当前MP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrMP {
      get { return currMP_; }
      set {
        currMP_ = value;
      }
    }

    /// <summary>Field number for the "MaxMP" field.</summary>
    public const int MaxMPFieldNumber = 14;
    private int maxMP_;
    /// <summary>
    ///最大MP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMP {
      get { return maxMP_; }
      set {
        maxMP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WS2C_SceneLineRole_DATA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WS2C_SceneLineRole_DATA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleType != other.RoleType) return false;
      if (RoleId != other.RoleId) return false;
      if (BaseRoleId != other.BaseRoleId) return false;
      if (Sex != other.Sex) return false;
      if (NickName != other.NickName) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(CurrPos, other.CurrPos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      if (Status != other.Status) return false;
      if (CurrHP != other.CurrHP) return false;
      if (MaxHP != other.MaxHP) return false;
      if (CurrMP != other.CurrMP) return false;
      if (MaxMP != other.MaxMP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleType != 0) hash ^= RoleType.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (BaseRoleId != 0) hash ^= BaseRoleId.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (currPos_ != null) hash ^= CurrPos.GetHashCode();
      if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CurrHP != 0) hash ^= CurrHP.GetHashCode();
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (CurrMP != 0) hash ^= CurrMP.GetHashCode();
      if (MaxMP != 0) hash ^= MaxMP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoleType);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (BaseRoleId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseRoleId);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (currPos_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurrPos);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotationY);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TargetPos);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Status);
      }
      if (CurrHP != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrHP);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxHP);
      }
      if (CurrMP != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrMP);
      }
      if (MaxMP != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxMP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoleType);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (BaseRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseRoleId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (currPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrPos);
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CurrHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrHP);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (CurrMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrMP);
      }
      if (MaxMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WS2C_SceneLineRole_DATA other) {
      if (other == null) {
        return;
      }
      if (other.RoleType != 0) {
        RoleType = other.RoleType;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.BaseRoleId != 0) {
        BaseRoleId = other.BaseRoleId;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.currPos_ != null) {
        if (currPos_ == null) {
          CurrPos = new global::YouYou.Proto.Vector3();
        }
        CurrPos.MergeFrom(other.CurrPos);
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          TargetPos = new global::YouYou.Proto.Vector3();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CurrHP != 0) {
        CurrHP = other.CurrHP;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.CurrMP != 0) {
        CurrMP = other.CurrMP;
      }
      if (other.MaxMP != 0) {
        MaxMP = other.MaxMP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleType = (global::YouYou.Proto.RoleType) input.ReadEnum();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 24: {
            BaseRoleId = input.ReadInt32();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 58: {
            if (currPos_ == null) {
              CurrPos = new global::YouYou.Proto.Vector3();
            }
            input.ReadMessage(CurrPos);
            break;
          }
          case 69: {
            RotationY = input.ReadFloat();
            break;
          }
          case 74: {
            if (targetPos_ == null) {
              TargetPos = new global::YouYou.Proto.Vector3();
            }
            input.ReadMessage(TargetPos);
            break;
          }
          case 80: {
            Status = input.ReadInt32();
            break;
          }
          case 88: {
            CurrHP = input.ReadInt32();
            break;
          }
          case 96: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 104: {
            CurrMP = input.ReadInt32();
            break;
          }
          case 112: {
            MaxMP = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回场景线中角色列表消息[c#]
  /// </summary>
  public sealed partial class GS2C_ReturnSceneLineRoleList : YouYou.IProto, pb::IMessage<GS2C_ReturnSceneLineRoleList> {
    private static readonly pb::MessageParser<GS2C_ReturnSceneLineRoleList> _parser = new pb::MessageParser<GS2C_ReturnSceneLineRoleList>(() => new GS2C_ReturnSceneLineRoleList());
    public ushort ProtoId => ProtoIdDefine.Proto_GS2C_ReturnSceneLineRoleList;
    public string ProtoEnName => "GS2C_ReturnSceneLineRoleList";
    public ProtoCategory Category => ProtoCategory.GameServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GS2C_ReturnSceneLineRoleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnSceneLineRoleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnSceneLineRoleList(GS2C_ReturnSceneLineRoleList other) : this() {
      roleList_ = other.roleList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnSceneLineRoleList Clone() {
      return new GS2C_ReturnSceneLineRoleList(this);
    }

    /// <summary>Field number for the "RoleList" field.</summary>
    public const int RoleListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::YouYou.Proto.WS2C_SceneLineRole_DATA> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(10, global::YouYou.Proto.WS2C_SceneLineRole_DATA.Parser);
    private readonly pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA> roleList_ = new pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA>();
    /// <summary>
    ///角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA> RoleList {
      get { return roleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GS2C_ReturnSceneLineRoleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GS2C_ReturnSceneLineRoleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roleList_.Equals(other.roleList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roleList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleList_.WriteTo(output, _repeated_roleList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GS2C_ReturnSceneLineRoleList other) {
      if (other == null) {
        return;
      }
      roleList_.Add(other.roleList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回角色进入场景线消息[c#]
  /// </summary>
  public sealed partial class GS2C_ReturnRoleEnterSceneLine : YouYou.IProto, pb::IMessage<GS2C_ReturnRoleEnterSceneLine> {
    private static readonly pb::MessageParser<GS2C_ReturnRoleEnterSceneLine> _parser = new pb::MessageParser<GS2C_ReturnRoleEnterSceneLine>(() => new GS2C_ReturnRoleEnterSceneLine());
    public ushort ProtoId => ProtoIdDefine.Proto_GS2C_ReturnRoleEnterSceneLine;
    public string ProtoEnName => "GS2C_ReturnRoleEnterSceneLine";
    public ProtoCategory Category => ProtoCategory.GameServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GS2C_ReturnRoleEnterSceneLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleEnterSceneLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleEnterSceneLine(GS2C_ReturnRoleEnterSceneLine other) : this() {
      roleList_ = other.roleList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleEnterSceneLine Clone() {
      return new GS2C_ReturnRoleEnterSceneLine(this);
    }

    /// <summary>Field number for the "RoleList" field.</summary>
    public const int RoleListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::YouYou.Proto.WS2C_SceneLineRole_DATA> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(10, global::YouYou.Proto.WS2C_SceneLineRole_DATA.Parser);
    private readonly pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA> roleList_ = new pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA>();
    /// <summary>
    ///角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YouYou.Proto.WS2C_SceneLineRole_DATA> RoleList {
      get { return roleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GS2C_ReturnRoleEnterSceneLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GS2C_ReturnRoleEnterSceneLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roleList_.Equals(other.roleList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roleList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleList_.WriteTo(output, _repeated_roleList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GS2C_ReturnRoleEnterSceneLine other) {
      if (other == null) {
        return;
      }
      roleList_.Add(other.roleList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回角色离开场景线消息[c#]
  /// </summary>
  public sealed partial class GS2C_ReturnRoleLeaveSceneLine : YouYou.IProto, pb::IMessage<GS2C_ReturnRoleLeaveSceneLine> {
    private static readonly pb::MessageParser<GS2C_ReturnRoleLeaveSceneLine> _parser = new pb::MessageParser<GS2C_ReturnRoleLeaveSceneLine>(() => new GS2C_ReturnRoleLeaveSceneLine());
    public ushort ProtoId => ProtoIdDefine.Proto_GS2C_ReturnRoleLeaveSceneLine;
    public string ProtoEnName => "GS2C_ReturnRoleLeaveSceneLine";
    public ProtoCategory Category => ProtoCategory.GameServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GS2C_ReturnRoleLeaveSceneLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleLeaveSceneLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleLeaveSceneLine(GS2C_ReturnRoleLeaveSceneLine other) : this() {
      roleId_ = other.roleId_;
      leaveSceneLineType_ = other.leaveSceneLineType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleLeaveSceneLine Clone() {
      return new GS2C_ReturnRoleLeaveSceneLine(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "leaveSceneLineType" field.</summary>
    public const int LeaveSceneLineTypeFieldNumber = 2;
    private global::YouYou.Proto.LeaveSceneLineType leaveSceneLineType_ = 0;
    /// <summary>
    ///离开原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.LeaveSceneLineType LeaveSceneLineType {
      get { return leaveSceneLineType_; }
      set {
        leaveSceneLineType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GS2C_ReturnRoleLeaveSceneLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GS2C_ReturnRoleLeaveSceneLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (LeaveSceneLineType != other.LeaveSceneLineType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (LeaveSceneLineType != 0) hash ^= LeaveSceneLineType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (LeaveSceneLineType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LeaveSceneLineType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (LeaveSceneLineType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeaveSceneLineType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GS2C_ReturnRoleLeaveSceneLine other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.LeaveSceneLineType != 0) {
        LeaveSceneLineType = other.LeaveSceneLineType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            LeaveSceneLineType = (global::YouYou.Proto.LeaveSceneLineType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回角色状态修改消息[c#]
  /// </summary>
  public sealed partial class GS2C_ReturnRoleChangeState : YouYou.IProto, pb::IMessage<GS2C_ReturnRoleChangeState> {
    private static readonly pb::MessageParser<GS2C_ReturnRoleChangeState> _parser = new pb::MessageParser<GS2C_ReturnRoleChangeState>(() => new GS2C_ReturnRoleChangeState());
    public ushort ProtoId => ProtoIdDefine.Proto_GS2C_ReturnRoleChangeState;
    public string ProtoEnName => "GS2C_ReturnRoleChangeState";
    public ProtoCategory Category => ProtoCategory.GameServer2Client;
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GS2C_ReturnRoleChangeState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YouYou.Proto.ProtoGS2CReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleChangeState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleChangeState(GS2C_ReturnRoleChangeState other) : this() {
      roleId_ = other.roleId_;
      status_ = other.status_;
      skillId_ = other.skillId_;
      currPos_ = other.currPos_ != null ? other.currPos_.Clone() : null;
      rotationY_ = other.rotationY_;
      targetPos_ = other.targetPos_ != null ? other.targetPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GS2C_ReturnRoleChangeState Clone() {
      return new GS2C_ReturnRoleChangeState(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    /// <summary>
    ///技能编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "CurrPos" field.</summary>
    public const int CurrPosFieldNumber = 4;
    private global::YouYou.Proto.Vector3 currPos_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.Vector3 CurrPos {
      get { return currPos_; }
      set {
        currPos_ = value;
      }
    }

    /// <summary>Field number for the "RotationY" field.</summary>
    public const int RotationYFieldNumber = 5;
    private float rotationY_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    /// <summary>Field number for the "TargetPos" field.</summary>
    public const int TargetPosFieldNumber = 6;
    private global::YouYou.Proto.Vector3 targetPos_;
    /// <summary>
    ///移动目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YouYou.Proto.Vector3 TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GS2C_ReturnRoleChangeState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GS2C_ReturnRoleChangeState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (Status != other.Status) return false;
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(CurrPos, other.CurrPos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (currPos_ != null) hash ^= CurrPos.GetHashCode();
      if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (currPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CurrPos);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotationY);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TargetPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (currPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrPos);
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GS2C_ReturnRoleChangeState other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.currPos_ != null) {
        if (currPos_ == null) {
          CurrPos = new global::YouYou.Proto.Vector3();
        }
        CurrPos.MergeFrom(other.CurrPos);
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          TargetPos = new global::YouYou.Proto.Vector3();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 34: {
            if (currPos_ == null) {
              CurrPos = new global::YouYou.Proto.Vector3();
            }
            input.ReadMessage(CurrPos);
            break;
          }
          case 45: {
            RotationY = input.ReadFloat();
            break;
          }
          case 50: {
            if (targetPos_ == null) {
              TargetPos = new global::YouYou.Proto.Vector3();
            }
            input.ReadMessage(TargetPos);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
