// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DTEquipList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DTEquipList GetRootAsDTEquipList(ByteBuffer _bb) { return GetRootAsDTEquipList(_bb, new DTEquipList()); }
  public static DTEquipList GetRootAsDTEquipList(ByteBuffer _bb, DTEquipList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTEquipList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public YouYou.DataTable.DTEquip? DTEquips(int j) { int o = __p.__offset(4); return o != 0 ? (YouYou.DataTable.DTEquip?)(new YouYou.DataTable.DTEquip()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DTEquipsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<YouYou.DataTable.DTEquipList> CreateDTEquipList(FlatBufferBuilder builder,
      VectorOffset DTEquipsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DTEquipList.AddDTEquips(builder, DTEquipsOffset);
    return DTEquipList.EndDTEquipList(builder);
  }

  public static void StartDTEquipList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDTEquips(FlatBufferBuilder builder, VectorOffset DTEquipsOffset) { builder.AddOffset(0, DTEquipsOffset.Value, 0); }
  public static VectorOffset CreateDTEquipsVector(FlatBufferBuilder builder, Offset<YouYou.DataTable.DTEquip>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDTEquipsVectorBlock(FlatBufferBuilder builder, Offset<YouYou.DataTable.DTEquip>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDTEquipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<YouYou.DataTable.DTEquipList> EndDTEquipList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<YouYou.DataTable.DTEquipList>(o);
  }
};


}
