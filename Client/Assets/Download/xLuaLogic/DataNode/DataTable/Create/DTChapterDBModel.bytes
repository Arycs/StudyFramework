-- Create By 悠游课堂 http://www.u3dol.com 悠游课堂 www.u3dol.com
DTChapterDBModel = { }

local this = DTChapterDBModel;

local dtchapterTable = { }; --定义表格
local dtchapterTableDic = { }; --定义表格字典

local dataTableName = "DTChapter";
local currColumns = 8;
local isAlreadyLoadTableInCSharp = false;
local lastUseTime = 0;
local loadType = 0; --读取方式0=从lua文件读取 1=从c#已有数据加载

function DTChapterDBModel.LoadList()
    GameInit.AddTotalLoadTableCount();
    if (loadType == 0) then
        local arr = DTChapterEntity.GetArr();
        for i = 1, arr.Len do
            local item = arr.ByIdx[i]; --拿到索引数据
            local dtchapterEntity = DTChapterEntity.NewFromArrItem(item);
            dtchapterTable[#dtchapterTable + 1] = dtchapterEntity;
            dtchapterTableDic[dtchapterEntity.Id] = dtchapterEntity;
        end
        GameInit.LoadOneTableComplete();
    else
        --检查这个表在c#中是否已经加载
        if (GameEntry.DataTable:CheckAlreadyLoadTable(dataTableName, currColumns)) then
            isAlreadyLoadTableInCSharp = true;
            GameInit.LoadOneTableComplete();
        else
            print("table load fail"..dataTableName);
            GameInit.LoadOneTableComplete();
        end
    end
end

function DTChapterDBModel.GetList()
    --如果和c#不一致 说明自己会加载
    if (isAlreadyLoadTableInCSharp == false) then
        return dtchapterTable;
    end

    lastUseTime = Time.time;
    --循环c#的表
    local lstCSharp = GameEntry.DataTable.DTChapterList:GetList();
    local len = lstCSharp.Count - 1;
    local dtchapterEntityCSharp = nil;
    local dtchapterEntity = nil;

    for i = 0, len, 1 do
        dtchapterEntityCSharp = lstCSharp[i];
        dtchapterEntity = this.GetEntityFromCSharp(dtchapterEntityCSharp.Id, dtchapterEntityCSharp);
        this.AddToTable(dtchapterEntity);
    end
    lstCSharp = nil;
    len = nil;
    dtchapterEntityCSharp = nil;
    dtchapterEntity = nil;

    return dtchapterTable;
end

function DTChapterDBModel.GetEntity(id)
    local ret = this.GetEntityInner(id);
    lastUseTime = Time.time;

    --如果在lua中存在 或者和c#不一致 直接返回
    if (ret ~= nil or isAlreadyLoadTableInCSharp == false) then
        return ret;
    end

    --去c#中查询
    ret = this.GetEntityFromCSharp(id);
    if (ret ~= nil) then
        this.AddToTable(ret);
    end
    return ret;
end

function DTChapterDBModel.GetEntityInner(id)
    return dtchapterTableDic[id];
end

function DTChapterDBModel.AddToTable(entity)
    if (this.GetEntityInner(entity.Id) == nil) then
        dtchapterTable[#dtchapterTable + 1] = entity;
        dtchapterTableDic[entity.Id] = entity;
    end
end

function DTChapterDBModel.GetEntityFromCSharp(id, cSharpEntity)
    local dtchapterEntityCSharp = (cSharpEntity ~= nil and cSharpEntity or GameEntry.DataTable.DTChapterList:GetEntityValue(id));
    if (dtchapterEntityCSharp == nil) then
        return nil;
    end

    local dtchapterEntity = nil;
    if(cSharpEntity ~= nil) then
        --说明是通过循环列表时候获取单个对象
        dtchapterEntity = this.GetEntityInner(id);
        if(dtchapterEntity ~= nil) then
            return dtchapterEntity;
        end
    end

    local BranchLevelId = {};
    local len = dtchapterEntityCSharp.BranchLevelIdLength - 1;
    for i = 0, len, 1 do
        BranchLevelId[#BranchLevelId+1] = dtchapterEntityCSharp:BranchLevelId(i)
    end

    local BranchLevelName = {};
    local len = dtchapterEntityCSharp.BranchLevelNameLength - 1;
    for i = 0, len, 1 do
        BranchLevelName[#BranchLevelName+1] = dtchapterEntityCSharp:BranchLevelName(i)
    end

    dtchapterEntity = DTChapterEntity.New(
        dtchapterEntityCSharp.Id,
        dtchapterEntityCSharp.ChapterName,
        dtchapterEntityCSharp.GameLevelCount,
        dtchapterEntityCSharp.BG_Pic,
        BranchLevelId,
        BranchLevelName,
        dtchapterEntityCSharp.Uvx,
        dtchapterEntityCSharp.Uvy
        );
    dtchapterEntityCSharp = nil;
    BranchLevelId = nil;
    BranchLevelName = nil;
    return dtchapterEntity;
end

function DTChapterDBModel.CheckGC()
    if (isAlreadyLoadTableInCSharp and Time.time > lastUseTime + GameEntry.Lua.LuaDataTableLife and #dtchapterTable > 0) then
        dtchapterTable = { };
        dtchapterTableDic = { };
    end
end